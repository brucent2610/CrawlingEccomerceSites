version: '3'
services:
  ecommerce-crawling-mongo:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
    volumes:
      - ./mongo/001_users.js:/docker-entrypoint-initdb.d/001_users.js:ro
      - ./mongo/file.key:/data/file.key:ro
      - ./mongo/db:/data/db
      - ./mongo/configdb:/data/configdb
      - ./data/backup:/data/backup
      - ./data/tiki:/data/tiki
    # Open when need replica sets
    # links:
    #   - ecommerce-crawling-mongo-rs1
    #   - ecommerce-crawling-mongo-rs2
    ports:
      - "27017:27017"
    restart: always
    command: mongod --auth --wiredTigerCacheSizeGB 1.5
    # Open when need replica sets
    # command: mongod --auth --bind_ip_all --replSet dbrs --keyFile /data/file.key
  ecommerce-crawling-mongo-rs1:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
    volumes:
      - ./mongors/001_users.js:/docker-entrypoint-initdb.d/001_users.js:ro
      - ./mongo/file.key:/data/file.key:ro
      - ./mongors/db1:/data/db
      - ./mongors/configdb2:/data/configdb
    ports:
      - "27018:27017"
    restart: always
    command: mongod --auth --bind_ip_all --replSet dbrs --keyFile /data/file.key
  ecommerce-crawling-mongo-rs2:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
    volumes:
      - ./mongors/001_users.js:/docker-entrypoint-initdb.d/001_users.js:ro
      - ./mongo/file.key:/data/file.key:ro
      - ./mongors/db2:/data/db
      - ./mongors/configdb2:/data/configdb
    ports:
      - "27019:27017"
    restart: always
    command: mongod --auth --bind_ip_all --replSet dbrs --keyFile /data/file.key
  ecommerce-images-redis:
    image: redis
    ports:
      - 6379:6379
  ecommerce-mysql:
    image: mysql:${MYSQL_VERSION}
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes: 
      - ./mysql:/var/lib/mysql
      - ./data/mysql:/var/lib/mysql-files/
  ecommerce-zookeeper:
    image: quay.io/debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
  ecommerce-kafka:
    image: quay.io/debezium/kafka:${DEBEZIUM_VERSION}
    ports:
      - 9092:9092
    links:
      - ecommerce-zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "ecommerce-kafka"
      KAFKA_ADVERTISED_PORT: "9092"
      ZOOKEEPER_CONNECT: ecommerce-zookeeper:2181
  ecommerce-debezium-connect:
    image: debezium/connect-jdbc:${DEBEZIUM_VERSION}
    build:
      context: debezium-jdbc
      dockerfile: ./docker/.Dockerfile
      args:
        DEBEZIUM_VERSION: ${DEBEZIUM_VERSION}
        MYSQL_VERSION: ${MYSQL_VERSION}
    ports:
      - 8083:8083
    links:
      - ecommerce-kafka
      - ecommerce-crawling-mongo
      - ecommerce-mysql
    environment:
      - BOOTSTRAP_SERVERS=ecommerce-kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_source_connect_statuses
    volumes: 
      - ./debezium-jdbc/connector:/kafka-connect/debezium-connector
      - ./debezium-jdbc/config:/kafka/config
  ecommerce-crawling-app:
    depends_on:
      - ecommerce-crawling-mongo
      - ecommerce-images-redis
    build:
      context: ./src
      dockerfile: ./docker/.Dockerfile
    volumes:
      - ./src:/usr/src/app
    # command: python main.py
    # 1. Run crawling the main categories
    # command: python spider1.py
    # 2. Run crawling all sub categories
    # command: python spider2.py
    # 3. Run crawling all products in all page in each categories 
    # command: python spider3.py
    # 4. Run crawling all products exist in products collection 
    command: python spider4.py

    # 1. Run when debug the Spider Tiki Page
    # command: scrapy crawl TikiPage
    # 2. Run when debug the Spider Category API
    # command: scrapy crawl TikiCategoryApi
    # 3. Run when debug the Spider Tiki Categoies
    # command: scrapy crawl TikiCategoriesPage
    # 4. Run when debug the Spider Product Detail API
    # command: scrapy crawl TikiProductApi
    environment:
      ENV: ${ENV}
      MONGO_URI: ${MONGO_URI}
      MONGO_DATABASE: ${MONGO_DATABASE}
      LIMIT: 20
      SKIP: 0
  ecommerce-images-worker:
    # depends_on:
    #   - ecommerce-images-redis
    build:
      context: ./src/ecommerces_images
      dockerfile: ./docker/.Dockerfile
    volumes:
      - ./src/ecommerces_images:/usr/src/app
      - ./data/images:/usr/src/images
    environment:
      ENV: ${ENV}
      MONGO_URI: ${MONGO_URI}
      MONGO_DATABASE: ${MONGO_DATABASE}
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  ecommerce-mysql-worker:
    depends_on:
      - ecommerce-crawling-mongo
      - ecommerce-mysql
    build:
      context: ./src/ecommerces_mysql
      dockerfile: ./docker/.Dockerfile
    volumes:
      - ./src/ecommerces_mysql:/usr/src/app
      - ./data/images:/usr/src/images
    environment:
      ENV: ${ENV}
      MONGO_URI: ${MONGO_URI}
      MONGO_DATABASE: ${MONGO_DATABASE}
      REDIS_URL: ${REDIS_URL}
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      LIMIT: 200
      SKIP: 0
  ecommerce-mysql-worker-2:
    depends_on:
      - ecommerce-crawling-mongo
      - ecommerce-mysql
    build:
      context: ./src/ecommerces_mysql
      dockerfile: ./docker/.Dockerfile
    volumes:
      - ./src/ecommerces_mysql:/usr/src/app
      - ./data/images:/usr/src/images
    environment:
      ENV: ${ENV}
      MONGO_URI: ${MONGO_URI}
      MONGO_DATABASE: ${MONGO_DATABASE}
      REDIS_URL: ${REDIS_URL}
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      LIMIT: 200
      SKIP: 1000
  ecommerce-mysql-worker-3:
    depends_on:
      - ecommerce-crawling-mongo
      - ecommerce-mysql
    build:
      context: ./src/ecommerces_mysql
      dockerfile: ./docker/.Dockerfile
    volumes:
      - ./src/ecommerces_mysql:/usr/src/app
      - ./data/images:/usr/src/images
    environment:
      ENV: ${ENV}
      MONGO_URI: ${MONGO_URI}
      MONGO_DATABASE: ${MONGO_DATABASE}
      REDIS_URL: ${REDIS_URL}
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      LIMIT: 200
      SKIP: 2000
  ecommerce-mysql-worker-4:
    depends_on:
      - ecommerce-crawling-mongo
      - ecommerce-mysql
    build:
      context: ./src/ecommerces_mysql
      dockerfile: ./docker/.Dockerfile
    volumes:
      - ./src/ecommerces_mysql:/usr/src/app
      - ./data/images:/usr/src/images
    environment:
      ENV: ${ENV}
      MONGO_URI: ${MONGO_URI}
      MONGO_DATABASE: ${MONGO_DATABASE}
      REDIS_URL: ${REDIS_URL}
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      LIMIT: 200
      SKIP: 3000
  ecommerce-ingredients-worker:
    depends_on:
      - ecommerce-crawling-mongo
    build:
      context: ./src/ecommerces_ingredients
      dockerfile: ./docker/.Dockerfile
    volumes:
      - ./src/ecommerces_ingredients:/usr/src/app
      - ./data/csv:/usr/src/csv
    environment:
      ENV: ${ENV}
      MONGO_URI: ${MONGO_URI}
      MONGO_DATABASE: ${MONGO_DATABASE}
      LIMIT: ${LIMIT}
  ecommerce-ingredients-worker-2:
    depends_on:
      - ecommerce-crawling-mongo
    build:
      context: ./src/ecommerces_ingredients
      dockerfile: ./docker/.1.Dockerfile
    volumes:
      - ./src/ecommerces_ingredients:/usr/src/app
      - ./data/csv:/usr/src/csv
    environment:
      ENV: ${ENV}
      MONGO_URI: ${MONGO_URI}
      MONGO_DATABASE: ${MONGO_DATABASE}
      LIMIT: ${LIMIT}